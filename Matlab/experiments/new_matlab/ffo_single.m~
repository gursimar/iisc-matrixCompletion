% to check the curve for circle (rank dont matter, take it enough). 

clear all
clc
close all
tic

% Control variables
r=10;           % rank approximation (or latent features)
l_lim=2000;     % Missing enteries limit (starting from 1) for the loop 
lrate=0.003;    % learning rate
fro_th=0.05	% Frobinius norm threshold
l = 100;

 %To construct image
imageSizeX = 50;
imageSizeY = 50;
[columnsInImage rowsInImage] = meshgrid(1:imageSizeX, 1:imageSizeY);
 %Next create the circle in the image.
centerX = 25;
centerY = 25;
radius = 15;
width = 10;
M = 64.*( (rowsInImage - centerY).^2 + (columnsInImage - centerX).^2 <= radius.^2 & (rowsInImage - centerY).^2 + (columnsInImage - centerX).^2 >=(radius-width).^2);

subplot(2,2,1)
image(M)
title('original')

[u s v] = svd(M);
[u s v] = svd(M);
M_svd = u*s*v';
subplot(2,2,2);
image(M_svd)

%Compressed image by dropping columns (SVD)
v_tr = v';
M_svd_dropped = u(:,1:r) * s(1:r,1:r) * v_tr(1:r,:);
subplot(2,2,4)
image (M_svd_dropped)
title('Only first r columns after dropping')

FRO_dropped = sum(sum((M - M_svd_dropped).^2))


% To construct rectangle
%a = 64 *  ones (9,1)
%b = [64 64 64 0 0 0 64 64 64]
%b = b'
%c = [64 64 64 0 64 0 64 64 64]
%c =c'
%M = [a a a b c c  b a a a]
%subplot(2,2,1)
%image(M)	% Plot the original matrix

% End of control variables

a = size(M);

k = randperm(a(1)*a(2));
k = k (1:l);

M_missing = M;
M_missing(k)=32;

%image(M_missing)      % plot the missing matrix
%title('Missing enteries')

% Initialize two latent feature matrices with some random enteries
u_approx_missing = randint (a(1),r,3);
v_approx_missing = randint (r,a(2),3);

% Approximation matrix for the original matrix
M_approx_missing = u_approx_missing * v_approx_missing;

%pause

% Do iterations and make corrections
k=0; % will count number of iterations
FRO_NORM_DIFF_MISSING =999;	% Resets the var for new computations(999 > fro_th)

while(FRO_NORM_DIFF_MISSING>fro_th)
    FRO_NORM_DIFF_MISSING = 0;	%resets the value
    for i = 1:a(1)
        for j = 1:a(2)
            if M_missing(i,j) ~= 32 % assume 32 are missing enteries
                % make corrections
                err = M_missing(i,j) - (u_approx_missing(i,:) * v_approx_missing(:,j));
                c = u_approx_missing(i,:); 
                u_approx_missing(i,:) = u_approx_missing(i,:) + (err*lrate).* v_approx_missing(:,j)';
                v_approx_missing(:,j) = v_approx_missing(:,j) + (err*lrate).* c';
                FRO_NORM_DIFF_MISSING = FRO_NORM_DIFF_MISSING + err*err;
            end
        end
    end
    %pause
    k=k+1 % this will calculate iterations
    FRO_NORM_DIFF_MISSING

    M_approx_missing =u_approx_missing * v_approx_missing;
    image (M_approx_missing);
    %pause
end
%pause
%k

% Store the results
toc